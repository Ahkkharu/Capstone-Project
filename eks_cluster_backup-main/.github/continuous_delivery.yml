env:
  repo:            "https://github.com/farrukh90/artemis"
  app_version:     "2.0.0"
  repo_region:     "us-east-1"
  project_id:      "${{ secrets.PROJECT_ID }}"
  app_name:        "artemis"
  tag_new_version: "${GITHUB_SHA}"
  account_id:      "${{ secrets.AWS_ACCOUNT_ID }}"

  # Sonar stuff, please update accordingly
  enable_sonar:    "true"
  sonar_organization: "pedrodb87"
  sonar_projectKey: "pedrodb87"
  sonar_login: "5e6daa7f9acca8227a03f4ec47aefbaa5f887f0a"


# This is a basic workflow to help you get started with Actions

name: Continuous delivery

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Clone a repo
        run: |
          git clone ${{ env.repo }} 

      - name: Run sonarqube
        if: ${{env.enable_sonar == 'false'}}
        run: sonar-scanner
            -Dsonar.organization=${{ env.sonar_organization }}                              
            -Dsonar.projectKey=${{ env.sonar_projectKey }}                         
            -Dsonar.login=${{ env.sonar_login }}                                   
            -Dsonar.sources=artemis/
            -Dsonar.host.url=https://sonarcloud.io    
      
      # Runs a set of commands using the runners shell
      - name: Switch Branches
        working-directory: ${{ env.app_name }}
        run: |
          git checkout ${{ env.app_version }}
          ls -l 
     
      # Runs a set of commands using the runners shell
      - name: Remove Old Images
        working-directory: ${{ env.app_name }}
        run: |
          echo "hello"
          # docker image prune -af

      # Runs a set of commands using the runners shell
      - name: Build Image
        working-directory: ${{ env.app_name }}
        run: |
          # docker image prune -af
          docker build -t ${{ env.app_name }}:${{ env.app_version }}   .     

      # Runs a set of commands using the runners shell
      - name: Tag Image
        working-directory: ${{ env.app_name }}
        run: |
          docker image tag ${{ env.app_name }}:${{ env.app_version }} ${{ env.account_id }}.dkr.ecr.${{ env.repo_region }}.amazonaws.com/${{ env.app_name }}:${{ env.tag_new_version }}    
      
      # authenticating to the cloud.
      - name: Set up AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # authenticate to ecr repository
      - name: Authenticate to repository
        run: |
          aws ecr get-login-password --region ${{ env.repo_region }} | docker login --username AWS --password-stdin ${{ env.account_id }}.dkr.ecr.${{ env.repo_region }}.amazonaws.com

      # push to ecr repository
      - name: pushing to repository
        run: |
          docker push ${{ env.account_id }}.dkr.ecr.${{ env.repo_region }}.amazonaws.com/${{ env.app_name }}:${{ env.tag_new_version }} 