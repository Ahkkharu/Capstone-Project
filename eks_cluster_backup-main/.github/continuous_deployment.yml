env:
  region:             "us-east-1"
  app_name:           "artemis"
  app_version:        ${GITHUB_SHA}
  app_port:           "5000"
  project_id:         "${{ secrets.PROJECT_ID }}"
  repository:         "${{ secrets.ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/artemis"
  cluster_name:       "Balza-cluster"
  helm_repository:    "https://github.com/farrukh90/custom_helm_chart.git"
  aws_domain_name: "${{ secrets.AWS_DOMAIN_NAME }}"
  environment:        "qa"
  github_username:    "pedrodb87"
  slack_enabled:      "false"



name: ContinuousDeployment
on:
  workflow_run:
    workflows: ["Continuous delivery"]
    types:
      - completed
# on:
#   # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # authenticating to the cloud.
      - name: Set up AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Check Out Helm Repo
        run: |
          git clone "${{ env.helm_repository }}"
        

      # Get k8s credentials
      - name: Get k8s credentials
        run: |
          aws eks --region ${{ env.region }} update-kubeconfig --name ${{ env.cluster_name }}
          kubectl get nodes

      
      - name: Configure Backend
        working-directory: "custom_helm_chart"
        run: |
          bash setenv.sh

      - name: Initialize
        working-directory: "custom_helm_chart"
        run: |
          terraform init 


      - name: Create workspace
        working-directory: "custom_helm_chart"
        run: |
          terraform workspace  select  ${{ env.environment }}   ||  terraform workspace  new  ${{ env.environment }}


      # Runs a set of commands using the runners shell
      - name: Deploy Application
        working-directory: "custom_helm_chart"
        run: |
          terraform apply   \
          -var repository="${{ env.repository }}"     \
          -var app_version="${{ env.app_version }}"   \
          -var app_port="${{ env.app_port }}"          \
          -var aws_domain_name="${{ env.aws_domain_name }}"          \
          -var app_name="${{ env.app_name }}"   \
          -var region="${{ env.region }}" \
          -var environment="${{ env.environment }}" \
          --auto-approve


      - name: Send custom JSON data to Slack workflow
        if: ${{env.slack_enabled == 'true'}}
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n\n\n\nApplication  ${{ env.app_name }} ${{ env.app_version }}  has been deployed for ${{ env.github_username }} \n\n\n\nSuccessfully"
            }
        env:
          SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/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"
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

          